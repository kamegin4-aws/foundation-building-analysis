Resources:
  ExecECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: ECSUseDockerSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Principal:
                  Service:
                    - ecs.amazonaws.com
                    - ecs-tasks.amazonaws.com
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DockerHubSecret
                Effect: Allow
                Condition:
                  StringEquals:
                    aws:ResourceAccount: !Ref AWS::AccountId
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Sid: ''
  BackendAPITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: BackendAPITaskDefinition
      ExecutionRoleArn: !GetAtt ExecECSTaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      EphemeralStorage:
        SizeInGiB: 21
      ContainerDefinitions:
        - Name: nginx
          Image: kamegin4/foundation-building:nginx
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
            - ContainerPort: 443
              HostPort: 443
              Protocol: tcp
          RepositoryCredentials:
            CredentialsParameter: !Ref DockerHubSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/NginxTaskDefinition
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          DependsOn:
            - Condition: START
              ContainerName: next_js
            - Condition: START
              ContainerName: django_rf
        - Name: next_js
          Image: kamegin4/foundation-building:next_js
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          RepositoryCredentials:
            CredentialsParameter: !Ref DockerHubSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/NextJsTaskDefinition
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
        - Name: django_rf
          Image: kamegin4/foundation-building:django_rf
          Essential: true
          PortMappings:
            - ContainerPort: 8081
              HostPort: 8081
              Protocol: tcp
          RepositoryCredentials:
            CredentialsParameter: !Ref DockerHubSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/DjangoRFTaskDefinition
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
  FoundationBuildingService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt Cluster.Arn
      TaskDefinition: !Ref FoundationBuildingTaskDefinition
      DesiredCount: !Ref desiredCountService
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref elbWebTargetGroupArn
        - ContainerName: next_js
          ContainerPort: 8080
          TargetGroupArn: !Ref elbPresentationTargetGroupArn
        - ContainerName: django_rf
          ContainerPort: 8081
          TargetGroupArn: !Ref elbApplicationTargetGroupArn
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref publicSecurityGroupId
            - !Ref internalELBSecurityGroupId
          Subnets:
            - !Ref publicSubnet1Id

Transform: AWS::Serverless-2016-10-31
Parameters:
  clientSecret:
    Type: String
    Default: XXXX
  globalIP:
    Type: String
    Default: 0.0.0.0
  domain:
    Type: String
    Default: foundation-building.XXXX.com
  appDomain:
    Type: String
    Default: InternalLoadBalancer-XXXX.elb.ap-northeast-1.amazonaws.com
  elbWebTargetGroupArn:
    Type: String
    Default: arn:aws:elasticloadbalancing:ap-northeast-1:XXXX:targetgroup/WebTargetGroup/XXXX
  elbPresentationTargetGroupArn:
    Type: String
    Default: arn:aws:elasticloadbalancing:ap-northeast-1:XXXX:targetgroup/PresentationTargetGroup/XXXX
  elbApplicationTargetGroupArn:
    Type: String
    Default: arn:aws:elasticloadbalancing:ap-northeast-1:XXXX:targetgroup/ApplicationTargetGroup/XXXX
  dockerCredentialsParameter:
    Type: String
    Default: '{"username":"XXXX","password":"XXXX"}'
  rdsMasterPasswordParameter:
    Type: String
    Default: '{"username":"XXXX","password":"XXXX"}'
  publicSubnet1Id:
    Type: String
    Default: subnet-XXXX
  privateSubnet1Id:
    Type: String
    Default: subnet-XXXX
  privateSubnet2Id:
    Type: String
    Default: subnet-XXXX
  publicSecurityGroupId:
    Type: String
    Default: sg-XXXX
  elastiCacheSecurityGroupId:
    Type: String
    Default: sg-XXXX
  rdsSecurityGroupId:
    Type: String
    Default: sg-XXXX
  internalELBSecurityGroupId:
    Type: String
    Default: sg-XXXX
  desiredCountService:
    Type: Number
    Default: 0
  dbEngineVersion:
    Type: String
    Default: 13.13
  dbClusterParameterGroupName:
    Type: String
    Default: default.aurora-postgresql13
Outputs:
  UnAuthorizedAPIId:
    Value: !Ref Cognito
    Description: UnAuthorizedAPIId
  AuthorizedAPIId:
    Value: !Ref CognitoAuthorized
    Description: AuthorizedAPIId
  UserPoolId:
    Value: !GetAtt UserPool.UserPoolId
    Description: UserPool.UserPoolId
  UserPoolClientId:
    Value: !GetAtt UserPoolClient.ClientId
    Description: UserPoolClient.ClientId

Resources:
  LambdaCognitoRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-role
      Path: /
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:ResourceAccount: !Ref AWS::AccountId
  UserAPILogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/api-gateway/${UserAPI}
      RetentionInDays: 7
  UserAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: UserAPI
      StageName: prod
      Variables:
        alias: prod
      OpenApiVersion: 3.1.0
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /cognito/signup:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUp.Arn}:${!stageVariables.alias}/invocations
              responses: {}
          /cognito/signup/confirm:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmSignUp.Arn}:${!stageVariables.alias}/invocations
              responses: {}
          /cognito/token/refresh:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TokenRefresh.Arn}:${!stageVariables.alias}/invocations
              responses: {}
          /cognito/sign-in:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignIn.Arn}:${!stageVariables.alias}/invocations
              responses: {}
          /cognito/sign-out:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignOut.Arn}:${!stageVariables.alias}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt UserAPILogsGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller", "user":"$context.identity.user",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath", "status":"$context.status",
          "responseLength":"$context.responseLength" }'
      ApiKeySourceType: HEADER
      Auth:
        ApiKeyRequired: true
      Cors:
        AllowOrigin: '''${allowOrigin}'''
        AllowHeaders: '''*'''
        AllowMethods: '''*'''
        MaxAge: 600
  SignUp:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SignUp
      CodeUri: src/SignUp
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaCognitoRole.Arn
      Events:
        UserAPIPOSTcognitosignup:
          Type: Api
          Properties:
            Path: /cognito/signup
            Method: POST
            RestApiId: !Ref UserAPI
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue userPoolId
          CLIENT_ID: !ImportValue userPoolClientId
          CLIENT_SECRET: !Ref clientSecret
          AllOW_ORIGIN: !Ref allowOrigin
  SignUpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SignUp}
      RetentionInDays: 7
  SignUpForDevInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SignUpDevAlias
    Properties:
      FunctionName: !Sub ${SignUp.Arn}:dev
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/signup
  SignUpForProdInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SignUpProdAlias
    Properties:
      FunctionName: !Sub ${SignUp.Arn}:prod
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/signup
  ConfirmSignUp:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ConfirmSignUp
      CodeUri: src/ConfirmSignUp
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaCognitoRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue userPoolId
          CLIENT_ID: !ImportValue userPoolClientId
          CLIENT_SECRET: !Ref clientSecret
          AllOW_ORIGIN: !Ref allowOrigin
      Events:
        UserAPIPOSTcognitosignupconfirm:
          Type: Api
          Properties:
            Path: /cognito/signup/confirm
            Method: POST
            RestApiId: !Ref UserAPI
  ConfirmSignUpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConfirmSignUp}
      RetentionInDays: 7
  ConfirmSignUpForDevInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ConfirmSignUpDevAlias
    Properties:
      FunctionName: !Sub ${ConfirmSignUp.Arn}:dev
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/signup/confirm
  ConfirmSignUpForProdInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ConfirmSignUpProdAlias
    Properties:
      FunctionName: !Sub ${ConfirmSignUp.Arn}:prod
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/signup/confirm
  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetUser
      CodeUri: src/GetUser
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaCognitoRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue userPoolId
          CLIENT_ID: !ImportValue userPoolClientId
          CLIENT_SECRET: !Ref clientSecret
          AllOW_ORIGIN: !Ref allowOrigin
      Events:
        UserAuthorizedAPIPOSTcognitouserdetail:
          Type: Api
          Properties:
            Path: /cognito/user/detail
            Method: POST
            RestApiId: !Ref UserAuthorizedAPI
  GetUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetUser}
      RetentionInDays: 7
  GetUserForDevInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GetUserDevAlias
    Properties:
      FunctionName: !Sub ${GetUser.Arn}:dev
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAuthorizedAPI}/*/POST/cognito/user/detail
  GetUserForProdInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GetUserProdAlias
    Properties:
      FunctionName: !Sub ${GetUser.Arn}:prod
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAuthorizedAPI}/*/POST/cognito/user/detail
  UserAuthorizedAPILogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/api-gateway/${UserAuthorizedAPI}
      RetentionInDays: 7
  UserAuthorizedAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: UserAuthorizedAPI
      StageName: prod
      Variables:
        alias: prod
      OpenApiVersion: 3.1.0
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /cognito/user/detail:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUser.Arn}:${!stageVariables.alias}/invocations
              responses: {}
          /cognito/user/attributes/edit:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAttributes.Arn}:${!stageVariables.alias}/invocations
              responses: {}
          /cognito/user/attributes/verify:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VerifyAttribute.Arn}:${!stageVariables.alias}/invocations
              responses: {}
          /cognito/user/remove:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUser.Arn}:${!stageVariables.alias}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt UserAuthorizedAPILogsGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller", "user":"$context.identity.user",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath", "status":"$context.status",
          "responseLength":"$context.responseLength" }'
      Auth:
        Authorizers:
          Cognito:
            UserPoolArn: !ImportValue userPoolArn
        DefaultAuthorizer: Cognito
      Cors:
        AllowOrigin: '''${allowOrigin}'''
        AllowHeaders: '''*'''
        AllowMethods: '''*'''
        MaxAge: 600
  SignInVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SignIn
      Description: v1.0
  SignUpVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SignUp
      Description: v1.0
  ConfirmSignUpVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ConfirmSignUp
      Description: v1.0
  SignOutVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SignOut
      Description: v1.0
  GetUserVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref GetUser
      Description: v1.0
  SignInDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SignIn
      FunctionVersion: $LATEST
      Name: dev
  SignInProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SignIn
      FunctionVersion: !GetAtt SignInVersion.Version
      Name: prod
  SignUpDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SignUp
      FunctionVersion: $LATEST
      Name: dev
  SignUpProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SignUp
      FunctionVersion: !GetAtt SignUpVersion.Version
      Name: prod
  ConfirmSignUpDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref ConfirmSignUp
      FunctionVersion: $LATEST
      Name: dev
  ConfirmSignUpProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref ConfirmSignUp
      FunctionVersion: !GetAtt ConfirmSignUpVersion.Version
      Name: prod
  SignOutDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SignOut
      FunctionVersion: $LATEST
      Name: dev
  SignOutProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SignOut
      FunctionVersion: !GetAtt SignOutVersion.Version
      Name: prod
  GetUserDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref GetUser
      FunctionVersion: $LATEST
      Name: dev
  GetUserProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref GetUser
      FunctionVersion: !GetAtt GetUserVersion.Version
      Name: prod
  UserAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref UserAPI
      Description: UserAPI deployment
  UserAuthorizedAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref UserAuthorizedAPI
      Description: UserAuthorizedAPI deployment
  UserAPIDevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref UserAPI
      StageName: dev
      Description: dev stage
      DeploymentId: !GetAtt UserAPIDeployment.DeploymentId
      Variables:
        alias: dev
      AccessLogSetting:
        DestinationArn: !GetAtt UserAPILogsGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller", "user":"$context.identity.user",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath", "status":"$context.status",
          "responseLength":"$context.responseLength" }'
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO
  UserAuthorizedAPIDevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref UserAuthorizedAPI
      StageName: dev
      Description: dev stage
      DeploymentId: !GetAtt UserAuthorizedAPIDeployment.DeploymentId
      Variables:
        alias: dev
      AccessLogSetting:
        DestinationArn: !GetAtt UserAuthorizedAPILogsGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller", "user":"$context.identity.user",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath", "status":"$context.status",
          "responseLength":"$context.responseLength" }'
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO
  TokenRefresh:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TokenRefresh
      CodeUri: src/TokenRefresh
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue userPoolId
          CLIENT_ID: !ImportValue userPoolClientId
          CLIENT_SECRET: !Ref clientSecret
          AllOW_ORIGIN: !Ref allowOrigin
      Events:
        UserAPIPOSTcognitotokenrefresh:
          Type: Api
          Properties:
            Path: /cognito/token/refresh
            Method: POST
            RestApiId: !Ref UserAPI
  TokenRefreshLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TokenRefresh}
      RetentionInDays: 7
  TokenRefreshForDevInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TokenRefreshDevAlias
    Properties:
      FunctionName: !Sub ${TokenRefresh.Arn}:dev
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/token/refresh
  TokenRefreshForProdInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TokenRefreshProdAlias
    Properties:
      FunctionName: !Sub ${TokenRefresh.Arn}:prod
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/token/refresh
  TokenRefreshVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref TokenRefresh
      Description: v1.0
  TokenRefreshDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref TokenRefresh
      FunctionVersion: $LATEST
      Name: dev
  TokenRefreshProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref TokenRefresh
      FunctionVersion: !GetAtt TokenRefreshVersion.Version
      Name: prod
  UpdateAttributesVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref UpdateAttributes
      Description: v1.0
  UpdateAttributesDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref UpdateAttributes
      FunctionVersion: !GetAtt UpdateAttributesVersion.Version
      Name: dev
  UpdateAttributesProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref UpdateAttributes
      FunctionVersion: !GetAtt UpdateAttributesVersion.Version
      Name: prod
  VerifyAttributeVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref VerifyAttribute
      Description: v1.0
  VerifyAttributeDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref VerifyAttribute
      FunctionVersion: !GetAtt VerifyAttributeVersion.Version
      Name: dev
  VerifyAttributeProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref VerifyAttribute
      FunctionVersion: !GetAtt VerifyAttributeVersion.Version
      Name: prod
  SignIn:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SignIn
      CodeUri: src/SignIn
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaCognitoRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue userPoolId
          CLIENT_ID: !ImportValue userPoolClientId
          CLIENT_SECRET: !Ref clientSecret
          AllOW_ORIGIN: !Ref allowOrigin
      Events:
        UserAPIPOSTcognitosignin:
          Type: Api
          Properties:
            Path: /cognito/sign-in
            Method: POST
            RestApiId: !Ref UserAPI
  SignInLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SignIn}
      RetentionInDays: 7
  SignInForDevInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SignInDevAlias
    Properties:
      FunctionName: !Sub ${SignIn.Arn}:dev
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/sign-in
  SignInForProdInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SignInProdAlias
    Properties:
      FunctionName: !Sub ${SignIn.Arn}:prod
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/sign-in
  SignOut:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SignOut
      CodeUri: src/SignOut
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaCognitoRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue userPoolId
          CLIENT_ID: !ImportValue userPoolClientId
          CLIENT_SECRET: !Ref clientSecret
          AllOW_ORIGIN: !Ref allowOrigin
      Events:
        UserAPIPOSTcognitosignout:
          Type: Api
          Properties:
            Path: /cognito/sign-out
            Method: POST
            RestApiId: !Ref UserAPI
  SignOutLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SignOut}
      RetentionInDays: 7
  SignOutForDevInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SignOutDevAlias
    Properties:
      FunctionName: !Sub ${SignOut.Arn}:dev
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/sign-out
  SignOutForProdInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SignOutProdAlias
    Properties:
      FunctionName: !Sub ${SignOut.Arn}:prod
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAPI}/*/POST/cognito/sign-out
  UpdateAttributes:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UpdateAttributes
      CodeUri: src/UpdateAttributes
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaCognitoRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue userPoolId
          CLIENT_ID: !ImportValue userPoolClientId
          CLIENT_SECRET: !Ref clientSecret
          AllOW_ORIGIN: !Ref allowOrigin
      Events:
        UserAuthorizedAPIPOSTcognitouserattributesedit:
          Type: Api
          Properties:
            Path: /cognito/user/attributes/edit
            Method: POST
            RestApiId: !Ref UserAuthorizedAPI
  UpdateAttributesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateAttributes}
      RetentionInDays: 7
  UpdateAttributesForDevInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - UpdateAttributesDevAlias
    Properties:
      FunctionName: !Sub ${UpdateAttributes.Arn}:dev
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAuthorizedAPI}/*/POST/cognito/user/attributes/edit
  UpdateAttributesForProdInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - UpdateAttributesProdAlias
    Properties:
      FunctionName: !Sub ${UpdateAttributes.Arn}:prod
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAuthorizedAPI}/*/POST/cognito/user/attributes/edit
  VerifyAttribute:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: VerifyAttribute
      CodeUri: src/VerifyAttribute
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaCognitoRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue userPoolId
          CLIENT_ID: !ImportValue userPoolClientId
          CLIENT_SECRET: !Ref clientSecret
          AllOW_ORIGIN: !Ref allowOrigin
      Events:
        UserAuthorizedAPIPOSTcognitouserattributesverify:
          Type: Api
          Properties:
            Path: /cognito/user/attributes/verify
            Method: POST
            RestApiId: !Ref UserAuthorizedAPI
  VerifyAttributeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${VerifyAttribute}
      RetentionInDays: 7
  VerifyAttributeForDevInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - VerifyAttributeDevAlias
    Properties:
      FunctionName: !Sub ${VerifyAttribute.Arn}:dev
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAuthorizedAPI}/*/POST/cognito/user/attributes/verify
  VerifyAttributeForProdInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - VerifyAttributeProdAlias
    Properties:
      FunctionName: !Sub ${VerifyAttribute.Arn}:prod
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAuthorizedAPI}/*/POST/cognito/user/attributes/verify
  DeleteUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DeleteUser
      CodeUri: src/DeleteUser
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaCognitoRole.Arn
      Events:
        UserAuthorizedAPIPOSTcognitouserremove:
          Type: Api
          Properties:
            Path: /cognito/user/remove
            Method: POST
            RestApiId: !Ref UserAuthorizedAPI
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue userPoolId
          CLIENT_ID: !ImportValue userPoolClientId
          CLIENT_SECRET: !Ref clientSecret
          AllOW_ORIGIN: !Ref allowOrigin
  DeleteUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteUser}
      RetentionInDays: 7
  DeleteUserDevInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - DeleteUserDevAlias
    Properties:
      FunctionName: !Sub ${DeleteUser.Arn}:dev
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAuthorizedAPI}/*/POST/cognito/user/remove
  DeleteUserProdInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - DeleteUserProdAlias
    Properties:
      FunctionName: !Sub ${DeleteUser.Arn}:prod
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UserAuthorizedAPI}/*/POST/cognito/user/remove
  DeleteUserVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref DeleteUser
      Description: v1.0
  DeleteUserDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref DeleteUser
      FunctionVersion: $LATEST
      Name: dev
  DeleteUserProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref DeleteUser
      FunctionVersion: !GetAtt DeleteUserVersion.Version
      Name: prod
Transform: AWS::Serverless-2016-10-31
Parameters:
  clientSecret:
    Type: String
    Description: UserPoolClient secret
    Default: XXXX
  allowOrigin:
    Type: String
    Description: allowOrigin
    Default: https://foundation-building.XXXX.com,
      http://foundation-building-infra-inlb-XXXX.elb.ap-northeast-1.amazonaws.com
Outputs:
  UserAPIId:
    Value: !Ref UserAPI
    Description: UserAPI ID
    Export:
      Name: userAPIId
  UserAuthorizedAPIId:
    Value: !Ref UserAuthorizedAPI
    Description: UserAuthorizedAPI ID
    Export:
      Name: userAuthorizedAPIId
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
  Login:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Login
      CodeUri: src/Login
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOL_USER_POOL_ID: !Ref UserPool
          USERPOOL_USER_POOL_ARN: !GetAtt UserPool.Arn
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
      Events:
        CognitoPOSTcognitologin:
          Type: Api
          Properties:
            Path: /cognito/login
            Method: POST
            RestApiId: !Ref Cognito
  LoginLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Login}
  Logout:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Logout
      CodeUri: src/Logout
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        CognitoPOSTcognitologout:
          Type: Api
          Properties:
            Path: /cognito/logout
            Method: POST
            RestApiId: !Ref Cognito
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
  LogoutLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Logout}
  Configuration:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Configuration
      CodeUri: src/Configuration
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
      Events:
        CognitoAuthorizedPOSTcognitoconfiguration:
          Type: Api
          Properties:
            Path: /cognito/configuration
            Method: POST
            RestApiId: !Ref CognitoAuthorized
  ConfigurationLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Configuration}
  Cognito:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Cognito
      StageName: Prod
      Auth:
        ResourcePolicy:
          IpRangeWhitelist:
            - !Ref globalIP
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /cognito/login:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Login.Arn}/invocations
              responses: {}
          /cognito/logout:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Logout.Arn}/invocations
              responses: {}
          /cognito/signup:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUp.Arn}/invocations
              responses: {}
          /cognito/confirm-signup:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmSignUp.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowOrigin: '''*'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowMethods: '''*'''
        MaxAge: 5
  SignUp:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SignUp
      CodeUri: src/SignUp
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        CognitoPOSTcognitosignup:
          Type: Api
          Properties:
            Path: /cognito/signup
            Method: POST
            RestApiId: !Ref Cognito
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
  SignUpLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${SignUp}
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: true
  ConfirmSignUp:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ConfirmSignUp
      CodeUri: src/ConfirmSignUp
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        CognitoPOSTcognitoconfirmsignup:
          Type: Api
          Properties:
            Path: /cognito/confirm-signup
            Method: POST
            RestApiId: !Ref Cognito
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
  ConfirmSignUpLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConfirmSignUp}
  CognitoAuthorized:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: CognitoAuthorized
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /cognito/configuration:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Configuration.Arn}/invocations
              responses: {}
          /cognito/confirm-configuration:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmConfiguration.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Auth:
        Authorizers:
          Cognito:
            UserPoolArn: !GetAtt UserPool.Arn
        ResourcePolicy:
          IpRangeWhitelist:
            - !Ref globalIP
          SourceVpcWhitelist:
            - !Ref vpcId
        DefaultAuthorizer: Cognito
      Cors:
        AllowOrigin: '''*'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowMethods: '''*'''
        MaxAge: 5
  ConfirmConfiguration:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ConfirmConfiguration
      CodeUri: src/ConfirmConfiguration
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
      Events:
        CognitoAuthorizedPOSTcognitoconfirmconfiguration:
          Type: Api
          Properties:
            Path: /cognito/confirm-configuration
            Method: POST
            RestApiId: !Ref CognitoAuthorized
  ConfirmConfigurationLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConfirmConfiguration}
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
  ContainerFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: ContainerFileSystem
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
  NextJsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: NextJsTaskDefinition
      ExecutionRoleArn: !GetAtt ExecECSTaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      Cpu: '256'
      Memory: '512'
      ContainerDefinitions:
        - Name: next_js
          Image: kamegin4/foundation-building:next_js
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
            - ContainerPort: 443
              HostPort: 443
              Protocol: tcp
          RepositoryCredentials:
            CredentialsParameter: !Ref DockerHubSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/NextJsTaskDefinition
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          MountPoints:
            - ContainerPath: /app/data
              SourceVolume: efs-volume
      Volumes:
        - Name: efs-volume
          EFSVolumeConfiguration:
            FilesystemId: !Ref ContainerFileSystem
            RootDirectory: /
            TransitEncryption: ENABLED
  ContainerFileSystemMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      SecurityGroups:
        - !Ref efsSecurityGroupId
      FileSystemId: !Ref ContainerFileSystem
      SubnetId: !Ref publicSubnet1Id
  NextJSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt Cluster.Arn
      TaskDefinition: !Ref NextJsTaskDefinition
      DesiredCount: 0
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: next_js
          ContainerPort: 8080
          TargetGroupArn: !Ref elbTargetGroupArn
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref publicSecurityGroupId
          Subnets:
            - !Ref publicSubnet1Id
  ExecECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: ECSUseDockerSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DockerHubSecret
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Sid: ''
  DockerHubSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DockerHubSecret
      Description: DockerHubSecret
      SecretString: !Ref dockerCredentialsParameter
Transform: AWS::Serverless-2016-10-31
Parameters:
  clientSecret:
    Type: String
  globalIP:
    Type: String
  vpcId:
    Type: String
  publicSecurityGroupId:
    Type: String
  efsSecurityGroupId:
    Type: String
  publicSubnet1Id:
    Type: String
  elbTargetGroupArn:
    Type: String
  dockerCredentialsParameter:
    Type: String
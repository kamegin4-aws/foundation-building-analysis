Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !GetAtt UserPoolClient.ClientId
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
      IdentityPoolName: CognitoIdentityPool
  Login:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Login
      CodeUri: src/Login
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOL_USER_POOL_ID: !Ref UserPool
          USERPOOL_USER_POOL_ARN: !GetAtt UserPool.Arn
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
      Events:
        CognitoPOSTcognitologin:
          Type: Api
          Properties:
            Path: /cognito/login
            Method: POST
            RestApiId: !Ref Cognito
  LoginLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Login}
  Logout:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Logout
      CodeUri: src/Logout
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        CognitoPOSTcognitologout:
          Type: Api
          Properties:
            Path: /cognito/logout
            Method: POST
            RestApiId: !Ref Cognito
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
  LogoutLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Logout}
  Cognito:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Cognito
      StageName: sam
      Variables:
        alias: dev
      OpenApiVersion: 3.1.0
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /cognito/login:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Login.Arn}/invocations
              responses: {}
          /cognito/logout:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Logout.Arn}/invocations
              responses: {}
          /cognito/signup:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUp.Arn}/invocations
              responses: {}
          /cognito/signup/confirm:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmSignUp.Arn}/invocations
              responses: {}
          /cognito/token/refresh:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TokenRefresh.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Auth:
        ResourcePolicy:
          SourceVpcWhitelist:
            - !Ref vpcId
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource:
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/POST/cognito/login
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/OPTIONS/cognito/login
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/POST/cognito/signup
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/OPTIONS/cognito/signup
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/POST/cognito/signup/confirm
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/OPTIONS/cognito/signup/confirm
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/POST/cognito/logout
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/OPTIONS/cognito/logout
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/POST/cognito/token/refresh
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoId}/*/OPTIONS/cognito/token/refresh
      Cors:
        AllowOrigin: '''*'''
        AllowHeaders: '''Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'''
        AllowMethods: '''*'''
        MaxAge: 5
  SignUp:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SignUp
      CodeUri: src/SignUp
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        CognitoPOSTcognitosignup:
          Type: Api
          Properties:
            Path: /cognito/signup
            Method: POST
            RestApiId: !Ref Cognito
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
  SignUpLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${SignUp}
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: true
  ConfirmSignUp:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ConfirmSignUp
      CodeUri: src/ConfirmSignUp
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
      Events:
        CognitoPOSTcognitosignupconfirm:
          Type: Api
          Properties:
            Path: /cognito/signup/confirm
            Method: POST
            RestApiId: !Ref Cognito
  ConfirmSignUpLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ConfirmSignUp}
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
  ExecECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: ECSUseDockerSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DockerHubSecret
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Sid: ''
  DockerHubSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DockerHubSecret
      Description: DockerHubSecret
      SecretString: !Ref dockerCredentialsParameter
  RDSMasterPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSMasterPasswordSecret
      Description: RDSMasterPasswordSecret
      SecretString: !Ref rdsMasterPasswordParameter
  FreeUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !GetAtt UserPool.UserPoolId
      GroupName: FreeUserPoolGroup
      Description: Free user group
      RoleArn: !GetAtt InvokeAPIWithS3Role.Arn
  InvokeAPIWithS3Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Sid: ''
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Sid: ''
  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: CognitoDefault
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - mobileanalytics:PutEvents,
                - cognito-sync:*,
                - cognito-identity:*
              Resource:
                - '*'
              Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Sid: ''
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Sid: ''
          - Action: sts:AssumeRoleWithWebIdentity
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
  UnAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/job-function/ViewOnlyAccess
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: CognitoDefault
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - mobileanalytics:PutEvents,
                - cognito-sync:*,
              Resource:
                - '*'
              Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
  StageDevCognito:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref Cognito
      StageName: dev
      Description: Develop stage
      DeploymentId: !GetAtt DeploymentCognito.DeploymentId
      Variables:
        alias: dev
      AccessLogSetting:
        DestinationArn: !GetAtt LogGroupCognito.Arn
        Format: $context.requestId
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO
  AliasDevLogin:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref Login
      FunctionVersion: $LATEST
      Name: dev
  LogGroupCognito:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: LogGroupCognito
      RetentionInDays: 30
  AccountApi:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt RoleCloudWatchLogs.Arn
  RoleCloudWatchLogs:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Sid: ''
  AliasDevSignUp:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SignUp
      FunctionVersion: $LATEST
      Name: dev
  AliasDevConfirmSignUp:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref ConfirmSignUp
      FunctionVersion: $LATEST
      Name: dev
  AliasDevLogout:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref Logout
      FunctionVersion: $LATEST
      Name: dev
  AddGroup:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: AddGroup
      CodeUri: src/AddGroup
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt RoleCognito.Arn
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
      Events:
        CognitoAuthorizedPOSTcognitogroupuseradd:
          Type: Api
          Properties:
            Path: /cognito/group/user/add
            Method: POST
            RestApiId: !Ref CognitoAuthorized
  AddGroupLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${AddGroup}
  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetUser
      CodeUri: src/GetUser
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
      Events:
        CognitoAuthorizedPOSTcognitouserinfo:
          Type: Api
          Properties:
            Path: /cognito/user/info
            Method: POST
            RestApiId: !Ref CognitoAuthorized
  GetUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetUser}
  CognitoAuthorized:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: CognitoAuthorized
      StageName: sam
      Variables:
        alias: dev
      OpenApiVersion: 3.1.0
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /cognito/group/user/list:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListUserInGroup.Arn}/invocations
              responses: {}
          /cognito/user/info:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUser.Arn}/invocations
              responses: {}
          /cognito/group/user/add:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddGroup.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Auth:
        Authorizers:
          Cognito:
            UserPoolArn: !GetAtt UserPool.Arn
        DefaultAuthorizer: Cognito
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource:
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoAuthorizedId}/*/POST/cognito/group/user/list
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoAuthorizedId}/*/OPTIONS/cognito/group/user/list
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoAuthorizedId}/*/POST/cognito/group/user/add
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoAuthorizedId}/*/OPTIONS/cognito/group/user/add
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoAuthorizedId}/*/POST/cognito/user/info
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiCognitoAuthorizedId}/*/OPTIONS/cognito/user/info
      Cors:
        MaxAge: 5
        AllowOrigin: '''*'''
        AllowHeaders: '''Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'''
        AllowMethods: '''*'''
  AliasDevAddGroup:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref AddGroup
      FunctionVersion: $LATEST
      Name: dev
  AliasDevGetUser:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref GetUser
      FunctionVersion: $LATEST
      Name: dev
  StageDevCognitoAuthorized:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref CognitoAuthorized
      StageName: dev
      Description: Develop stage
      DeploymentId: !GetAtt DeploymentCognitoAuthorized.DeploymentId
      Variables:
        alias: dev
      AccessLogSetting:
        DestinationArn: !GetAtt LogGroupCognito.Arn
        Format: $context.requestId
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO
  ListUserInGroup:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ListUserInGroup
      CodeUri: src/ListUserInGroup
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt RoleCognito.Arn
      Events:
        CognitoAuthorizedPOSTcognitogroupuserlist:
          Type: Api
          Properties:
            Path: /cognito/group/user/list
            Method: POST
            RestApiId: !Ref CognitoAuthorized
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
  ListUserInGroupLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ListUserInGroup}
  AliasDevListUserInGroup:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref ListUserInGroup
      FunctionVersion: $LATEST
      Name: dev
  RoleCognito:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: CognitoAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - cognito-identity:*
                - cognito-idp:*
              Resource:
                - '*'
              Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Sid: ''
  VersionLogin:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref Login
      Description: v1
  VersionSignUp:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SignUp
      Description: v1
  VersionConfirmSignUp:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ConfirmSignUp
      Description: v1
  VersionLogout:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref Logout
      Description: v1
  VersionAddGroup:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref AddGroup
      Description: v1
  VersionGetUser:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref GetUser
      Description: v1
  VersionListUserInGroup:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ListUserInGroup
      Description: v1
  AliasProdLogin:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref Login
      FunctionVersion: !GetAtt VersionLogin.Version
      Name: prod
  AliasProdSignUp:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SignUp
      FunctionVersion: !GetAtt VersionSignUp.Version
      Name: prod
  AliasProdConfirmSignUp:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref ConfirmSignUp
      FunctionVersion: !GetAtt VersionConfirmSignUp.Version
      Name: prod
  AliasProdLogout:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref Logout
      FunctionVersion: !GetAtt VersionLogout.Version
      Name: prod
  AliasProdAddGroup:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref AddGroup
      FunctionVersion: !GetAtt VersionAddGroup.Version
      Name: prod
  AliasProdGetUser:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref GetUser
      FunctionVersion: !GetAtt VersionGetUser.Version
      Name: prod
  AliasProdListUserInGroup:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref ListUserInGroup
      FunctionVersion: !GetAtt VersionListUserInGroup.Version
      Name: prod
  DeploymentCognito:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref Cognito
      Description: Cognito deployment
  DeploymentCognitoAuthorized:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref CognitoAuthorized
      Description: CognitoAuthorized deployment
  StageProdCognito:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref Cognito
      StageName: prod
      Description: Production stage
      DeploymentId: !GetAtt DeploymentCognito.DeploymentId
      Variables:
        alias: prod
      AccessLogSetting:
        DestinationArn: !GetAtt LogGroupCognito.Arn
        Format: $context.requestId
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO
  StageProdCognitoAuthorized:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref CognitoAuthorized
      StageName: prod
      Description: Production stage
      DeploymentId: !GetAtt DeploymentCognitoAuthorized.DeploymentId
      Variables:
        alias: prod
      AccessLogSetting:
        DestinationArn: !GetAtt LogGroupCognito.Arn
        Format: $context.requestId
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO
  CacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: memcached
      NumCacheNodes: 1
      PreferredAvailabilityZone: ap-northeast-1a
      CacheSubnetGroupName: !Ref SubnetGroupElastiCache
      VpcSecurityGroupIds:
        - !Ref elastiCacheSecurityGroupId
  SubnetGroupElastiCache:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for my ElastiCache cluster
      SubnetIds:
        - !Ref publicSubnet1Id
  TokenRefresh:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TokenRefresh
      CodeUri: src/TokenRefresh
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
          CLIENT_ID: !Ref UserPoolClient
          CLIENT_SECRET: !Ref clientSecret
      Events:
        CognitoPOSTcognitotokenrefresh:
          Type: Api
          Properties:
            Path: /cognito/token/refresh
            Method: POST
            RestApiId: !Ref Cognito
  TokenRefreshLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${TokenRefresh}
  AliasDevTokenRefresh:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref TokenRefresh
      FunctionVersion: $LATEST
      Name: dev
  VersionTokenRefresh:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref TokenRefresh
      Description: v1
  AliasProdTokenRefresh:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref TokenRefresh
      FunctionVersion: !GetAtt VersionTokenRefresh.Version
      Name: prod
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: aurora-postgresql-cluster
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: '16.1'
      DatabaseName: foundation_building
      DBClusterParameterGroupName: default.aurora-postgresql16
      EnableCloudwatchLogsExports:
        - postgresql
      MasterUsername: !Sub '{{resolve:secretsmanager:${RDSMasterPasswordSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSMasterPasswordSecret}:SecretString:password}}'
      MasterUserSecret:
        SecretArn: !Ref RDSMasterPasswordSecret
      StorageEncrypted: true
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref rdsSecurityGroupId
  DBInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: aurora-postgresql-instance1
      DBInstanceClass: db.t3.medium
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref DBCluster
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup
      SubnetIds:
        - !Ref privateSubnet1Id
        - !Ref privateSubnet2Id
  ObjectStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-objectsto-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        BlockPublicAcls: true
        BlockPublicPolicy: true
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - HEAD
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - !Sub https://${domain}
            ExposedHeaders:
              - ETag
              - x-amz-meta-custom-header
            Id: myCORSRuleId1
            MaxAge: 3600
  ObjectStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ObjectStorage
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt ObjectStorage.Arn
              - !Sub ${ObjectStorage.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          TargetOriginId: !GetAtt ObjectStorage.RegionalDomainName
          ViewerProtocolPolicy: allow-all
          CachePolicyId: !GetAtt CachePolicy.Id
        Enabled: true
        Origins:
          - DomainName: !GetAtt ObjectStorage.RegionalDomainName
            Id: !GetAtt ObjectStorage.RegionalDomainName
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        SigningBehavior: always
        OriginAccessControlOriginType: s3
        SigningProtocol: sigv4
        Name: ObjectStorageOAC
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ObjectStorage
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Sid: AllowCloudFrontServicePrincipalReadOnly
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource: !Sub arn:aws:s3:::${ObjectStorage}/*
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}
  CachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        MinTTL: 300
        MaxTTL: 31536000
        ParametersInCacheKeyAndForwardedToOrigin:
          HeadersConfig:
            HeaderBehavior: none
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          QueryStringsConfig:
            QueryStringBehavior: none
        DefaultTTL: 86400
        Name: CloudfrontCachePolicy
  FoundationBuildingService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt Cluster.Arn
      TaskDefinition: !Ref FoundationBuildingTaskDefinition
      DesiredCount: 0
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref elbWebTargetGroupArn
        - ContainerName: next_js
          ContainerPort: 8080
          TargetGroupArn: !Ref elbPresentationTargetGroupArn
        - ContainerName: django_rf
          ContainerPort: 8081
          TargetGroupArn: !Ref elbApplicationTargetGroupArn
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref publicSecurityGroupId
          Subnets:
            - !Ref publicSubnet1Id
  FoundationBuildingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: FoundationBuildingTaskDefinition
      ExecutionRoleArn: !GetAtt ExecECSTaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      EphemeralStorage:
        SizeInGiB: 21
      ContainerDefinitions:
        - Name: nginx
          Image: kamegin4/foundation-building:nginx
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
            - ContainerPort: 443
              HostPort: 443
              Protocol: tcp
          RepositoryCredentials:
            CredentialsParameter: !Ref DockerHubSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/NginxTaskDefinition
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          DependsOn:
            - Condition: START
              ContainerName: next_js
            - Condition: START
              ContainerName: django_rf
        - Name: next_js
          Image: kamegin4/foundation-building:next_js
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          RepositoryCredentials:
            CredentialsParameter: !Ref DockerHubSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/NextJsTaskDefinition
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
        - Name: django_rf
          Image: kamegin4/foundation-building:django_rf
          Essential: true
          PortMappings:
            - ContainerPort: 8081
              HostPort: 8081
              Protocol: tcp
          RepositoryCredentials:
            CredentialsParameter: !Ref DockerHubSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/DjangoRFTaskDefinition
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthRole.Arn
        unauthenticated: !GetAtt UnAuthRole.Arn
  ConnectionGlueRDS:
    Type: AWS::Glue::Connection
    Properties:
      ConnectionInput:
        Name: ConnectionGlueRDS
        ConnectionType: JDBC
        Description: Connection to my RDS database
        ConnectionProperties:
          JDBC_CONNECTION_URL: !Sub jdbc:postgresql://${DBInstance1.Endpoint.Address}:${DBInstance1.Endpoint.Port}/foundation_building
          USERNAME: !Sub '{{resolve:secretsmanager:${RDSMasterPasswordSecret}:SecretString:username}}'
          PASSWORD: !Sub '{{resolve:secretsmanager:${RDSMasterPasswordSecret}:SecretString:password}}'
        PhysicalConnectionRequirements:
          SubnetId: !Ref privateSubnet2Id
          SecurityGroupIdList:
            - !Ref rdsSecurityGroupId
      CatalogId: !Ref AWS::AccountId
  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Targets:
        S3Targets:
          - Path: !Sub s3://${ObjectStorage}/FoundationBuildingApp/
        JdbcTargets:
          - ConnectionName: !Ref ConnectionGlueRDS
            Exclusions:
              - auth_*
              - django_*
            Path: foundation_building/public/%
      Role: !GetAtt GlueRole.Arn
      DatabaseName: !Ref GlueDatabase
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DEPRECATE_IN_DATABASE
      Name: crawler-for-foundation-building-s3-rds
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Name: foundation-building-s3-rds
        Description: Database created by S3 RDS
      CatalogId: !Ref AWS::AccountId
  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GlueRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AwsGlueDataBrewFullAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceNotebookRole
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: PassRoleGlue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - iam:PassRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/GlueRole
                Effect: Allow
        - PolicyName: GlueRDSSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref RDSMasterPasswordSecret
                Effect: Allow
        - PolicyName: GlueS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub ${ObjectStorage.Arn}/*
                Effect: Allow
        - PolicyName: GlueRDS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - rds-db:connect
                Resource:
                  - !Sub ${DBInstance1.DBInstanceArn}/*
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Sid: ''
Transform: AWS::Serverless-2016-10-31
Parameters:
  clientSecret:
    Type: String
  globalIP:
    Type: String
  domain:
    Type: String
  vpcId:
    Type: String
  elbWebTargetGroupArn:
    Type: String
  elbPresentationTargetGroupArn:
    Type: String
  elbApplicationTargetGroupArn:
    Type: String
  dockerCredentialsParameter:
    Type: String
  rdsMasterPasswordParameter:
    Type: String
  apiCognitoId:
    Type: String
  apiCognitoAuthorizedId:
    Type: String
  publicSubnet1Id:
    Type: String
  publicSubnet2Id:
    Type: String
  privateSubnet1Id:
    Type: String
  privateSubnet2Id:
    Type: String
  publicSecurityGroupId:
    Type: String
  elastiCacheSecurityGroupId:
    Type: String
  rdsSecurityGroupId:
    Type: String
